(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{62:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return d}));var r=t(3),o=t(7),i=(t(0),t(97)),a={id:"2018_solr_error",title:"Sitecore Solr Error - Processing Field Name. Resolving Multiple Field found on Solr Field Map. No matching template field on index field name, return type \u2018String\u2019 and field type \u201d"},l={unversionedId:"2018_solr_error",id:"2018_solr_error",isDocsHomePage:!1,title:"Sitecore Solr Error - Processing Field Name. Resolving Multiple Field found on Solr Field Map. No matching template field on index field name, return type \u2018String\u2019 and field type \u201d",description:"After an upgrade to Sitecore 9, our Sitecore search logs were filled with thousands of warnings, like the below:",source:"@site/docs/2018_solr_error.md",slug:"/2018_solr_error",permalink:"/2018_solr_error",version:"current",sidebar:"someSidebar",previous:{title:"Sitecore 9 - ContentSearch Solr query quirks with spaces and wildcards",permalink:"/contentsearch_quirks"},next:{title:"Digging into Unicorn configs in Sitecore Habitat",permalink:"/unicorn_configs"}},c=[],s={toc:c};function d(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"After an upgrade to Sitecore 9, our Sitecore search logs were filled with thousands of warnings, like the below:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-xml"}),"WARN Processing Field Name : Overview Text. Resolving Multiple Field found on Solr Field Map. No matching template field on index field name 'overview_text', return type 'String' and field type ''\n")),Object(i.b)("h4",{id:"whats-the-fix"},"What\u2019s the fix?"),Object(i.b)("p",null,"You need to add field mappings for each of the fields in your Solr index. In our case, we had no mapping for \u2018overview_text\u2019, so Sitecore / Solr didn\u2019t know how to treat the field. Add a config patch and specify a returnType for the fields you see as warnings in the log:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-xml"}),'<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:role="http://www.sitecore.net/xmlconfig/role/" xmlns:search="http://www.sitecore.net/xmlconfig/search/">\n  <sitecore>\n    <contentSearch>\n      <indexConfigurations>\n        <defaultSolrIndexConfiguration>\n          <fieldMap>\n            <fieldNames hint="raw:AddFieldByFieldName">\n              <field fieldName="overview_text" returnType="text" />\n            </fieldNames>\n          </fieldMap>\n        </defaultSolrIndexConfiguration>\n      </indexConfigurations>\n    </contentSearch>\n  </sitecore>\n</configuration>\n')),Object(i.b)("h4",{id:"update-25012018"},Object(i.b)("strong",{parentName:"h4"}," UPDATE 25/01/2018 ")),Object(i.b)("p",null,"While the above is suitable for adding a few fields, having hundreds or thousands of fields in your Solr index will lead to having to maintain lots of the above configuration entries. I raised a ticket with Sitecore, and was told \u201cWe registered this behavior as a bug with the reference #\u200b195567\u201d. Sitecore\u2019s suggested workaround is to add a log4Net filter which will stop the problematic entries from reaching the log. For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-xml"}),'\x3c!-- Filter out Solr log warnings--\x3e\n    <log4net>\n      <appender name="SearchLogFileAppender">\n        <filter type="log4net.Filter.StringMatchFilter">\n          <regexToMatch  value="Resolving Multiple Field found on Solr Field Map. No matching solr search field configuration on index field name|Search field name in Solr with Template Resolver is returning no entry|Resolving Multiple Field found on Solr Field Map. No matching template field on index field name|Solr with Template Resolver is returning multiple entry|is being skipped. Reason: No Field Type Name" />\n          <acceptOnMatch value="false" />\n        </filter>\n      </appender>\n    </log4net>\n')),Object(i.b)("p",null,"Hopefully a proper fix or configuration guidance will be released at some point."))}d.isMDXComponent=!0},97:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return g}));var r=t(0),o=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),d=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=d(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},f=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=d(t),f=r,g=p["".concat(a,".").concat(f)]||p[f]||u[f]||i;return t?o.a.createElement(g,l(l({ref:n},s),{},{components:t})):o.a.createElement(g,l({ref:n},s))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);